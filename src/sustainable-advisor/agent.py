# src/sustainable-advisor/agent.py
import json
import logging
import os
from typing import List, Dict, Any, Optional
from datetime import datetime
from mcp_client import MCPClient
from a2a_client import A2AClient

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Google AI integration
try:
    import google.generativeai as genai
    GOOGLE_AI_AVAILABLE = True
except ImportError:
    GOOGLE_AI_AVAILABLE = False
    logger.warning("Google AI not available - using fallback mode")

class SustainableAdvisorAgent:
    """
    Agente Inteligente de Sustentabilidade para Online Boutique
    
    Responsabilidades:
    1. Analisar produtos do cat√°logo usando crit√©rios de sustentabilidade
    2. Filtrar produtos sustent√°veis usando regras configur√°veis
    3. Comunicar com RecommenderAgent via A2A para ranking final
    4. Fornecer explica√ß√µes detalhadas sobre recomenda√ß√µes
    """
    
    def __init__(self):
        self.mcp_client = MCPClient()
        self.a2a_client = A2AClient()
        self.sustainability_rules = self._load_sustainability_rules()
        
        # Initialize Google AI if available
        self.google_ai_model = None
        self._init_google_ai()
        
        logger.info("üå± SustainableAdvisorAgent inicializado")

    def _init_google_ai(self):
        """Initialize Google AI with API key from environment"""
        if GOOGLE_AI_AVAILABLE:
            api_key = os.getenv('GOOGLE_API_KEY')
            if api_key:
                try:
                    genai.configure(api_key=api_key)
                    self.google_ai_model = genai.GenerativeModel('gemini-1.5-flash')
                    logger.info("‚úÖ Google AI configurado com sucesso")
                except Exception as e:
                    logger.error(f"‚ùå Erro ao configurar Google AI: {e}")
                    self.google_ai_model = None
            else:
                logger.warning("‚ö†Ô∏è GOOGLE_API_KEY n√£o encontrada - usando modo fallback")
        else:
            logger.warning("‚ö†Ô∏è Google AI n√£o dispon√≠vel - usando modo fallback")

    def _load_sustainability_rules(self) -> Dict[str, Any]:
        """
        Define regras de sustentabilidade configur√°veis
        """
        return {
            "carbon_score_threshold": 50,  # Produtos com score < 50 s√£o sustent√°veis
            "sustainability_score_threshold": 60,  # Score m√≠nimo para ser recomendado
            
            "eco_categories": {
                "sustainable": {
                    "weight": 1.0, 
                    "reason": "Certificado como produto sustent√°vel"
                },
                "bamboo": {
                    "weight": 0.9, 
                    "reason": "Material renov√°vel e biodegrad√°vel"
                },
                "handmade": {
                    "weight": 0.9, 
                    "reason": "Produ√ß√£o artesanal reduz pegada industrial"
                },
                "local": {
                    "weight": 0.8, 
                    "reason": "Produ√ß√£o local reduz emiss√µes de transporte"
                },
                "organic": {
                    "weight": 0.8, 
                    "reason": "Produ√ß√£o sem qu√≠micos nocivos ao meio ambiente"
                },
                "fair-trade": {
                    "weight": 0.8, 
                    "reason": "Com√©rcio justo e pr√°ticas √©ticas"
                },
                "recyclable": {
                    "weight": 0.7, 
                    "reason": "Pode ser reciclado ao fim da vida √∫til"
                },
                "renewable": {
                    "weight": 0.7, 
                    "reason": "Feito com materiais renov√°veis"
                }
            },
            
            "sustainable_keywords": [
                "bamboo", "organic", "eco", "green", "sustainable", 
                "recycled", "natural", "biodegradable", "renewable",
                "handmade", "artisan", "local", "fair-trade"
            ],
            
            "category_sustainability_bonus": {
                "kitchen": 0.1,  # Produtos de cozinha tendem a ser dur√°veis
                "home": 0.1,     # Produtos para casa s√£o investimentos de longo prazo
                "decor": 0.05    # Decora√ß√£o pode ser sustent√°vel
            }
        }

    def analyze_product_sustainability(self, product: Dict[str, Any]) -> Dict[str, Any]:
        """
        Analisa um produto individual e calcula seu score de sustentabilidade
        
        Args:
            product: Dicion√°rio com dados do produto
            
        Returns:
            An√°lise completa de sustentabilidade do produto
        """
        sustainability_score = 0
        reasons = []
        product_id = product.get('id', 'unknown')
        product_name = product.get('name', 'Produto sem nome')
        
        # 1. An√°lise por eco_tags
        eco_tags = product.get('eco_tags', [])
        for tag in eco_tags:
            if tag in self.sustainability_rules["eco_categories"]:
                rule = self.sustainability_rules["eco_categories"][tag]
                tag_score = rule["weight"] * 100
                sustainability_score += tag_score
                reasons.append({
                    "type": "eco_tag",
                    "tag": tag,
                    "score_added": tag_score,
                    "reason": f"‚úÖ {tag.title()}: {rule['reason']}"
                })
        
        # 2. An√°lise por carbon_score
        carbon_score = product.get('carbon_score', 100)
        if carbon_score < self.sustainability_rules["carbon_score_threshold"]:
            carbon_bonus = (self.sustainability_rules["carbon_score_threshold"] - carbon_score) * 2
            sustainability_score += carbon_bonus
            reasons.append({
                "type": "carbon_score",
                "score_added": carbon_bonus,
                "reason": f"üå± Baixa pegada de carbono: Score {carbon_score}/100"
            })
        
        # 3. An√°lise por palavras-chave no nome/descri√ß√£o
        product_text = f"{product.get('name', '')} {product.get('description', '')}".lower()
        keywords_found = []
        for keyword in self.sustainability_rules["sustainable_keywords"]:
            if keyword in product_text:
                keywords_found.append(keyword)
        
        if keywords_found:
            keyword_bonus = len(keywords_found) * 15  # 15 pontos por palavra-chave
            sustainability_score += keyword_bonus
            reasons.append({
                "type": "keywords",
                "keywords": keywords_found,
                "score_added": keyword_bonus,
                "reason": f"üîç Palavras-chave sustent√°veis encontradas: {', '.join(keywords_found)}"
            })
        
        # 4. B√¥nus por categoria
        categories = product.get('categories', [])
        for category in categories:
            if category in self.sustainability_rules["category_sustainability_bonus"]:
                category_bonus = self.sustainability_rules["category_sustainability_bonus"][category] * 100
                sustainability_score += category_bonus
                reasons.append({
                    "type": "category_bonus",
                    "category": category,
                    "score_added": category_bonus,
                    "reason": f"üè∑Ô∏è Categoria sustent√°vel: {category}"
                })
        
        # Normaliza score (m√°ximo 100)
        sustainability_score = min(sustainability_score, 100)
        is_sustainable = sustainability_score >= self.sustainability_rules["sustainability_score_threshold"]
        
        analysis = {
            "product_id": product_id,
            "product_name": product_name,
            "sustainability_score": round(sustainability_score, 2),
            "is_sustainable": is_sustainable,
            "carbon_score": carbon_score,
            "eco_tags": eco_tags,
            "categories": categories,
            "analysis_details": reasons,
            "analyzed_at": datetime.now().isoformat()
        }
        
        logger.debug(f"Produto {product_name}: Score {sustainability_score}/100 ({'‚úÖ' if is_sustainable else '‚ùå'})")
        return analysis

    def get_sustainable_products(self, user_preferences: Optional[Dict] = None) -> List[Dict[str, Any]]:
        """
        Obt√©m e filtra produtos sustent√°veis do cat√°logo
        
        Args:
            user_preferences: Prefer√™ncias do usu√°rio (opcional)
            
        Returns:
            Lista de produtos sustent√°veis com an√°lise completa
        """
        logger.info("üå± Iniciando an√°lise de sustentabilidade do cat√°logo")
        
        # 1. Busca produtos via MCP
        logger.info("üì¶ Buscando produtos do cat√°logo via MCP...")
        all_products = self.mcp_client.get_products()
        logger.info(f"‚úÖ {len(all_products)} produtos encontrados no cat√°logo")
        
        if not all_products:
            logger.warning("‚ö†Ô∏è Nenhum produto encontrado no cat√°logo")
            return []
        
        # 2. Analisa sustentabilidade de cada produto
        logger.info("üîç Analisando sustentabilidade dos produtos...")
        sustainable_products = []
        
        for product in all_products:
            analysis = self.analyze_product_sustainability(product)
            
            if analysis["is_sustainable"]:
                # Adiciona an√°lise ao produto
                enhanced_product = {
                    **product,
                    "sustainability_analysis": analysis
                }
                sustainable_products.append(enhanced_product)
        
        logger.info(f"üåø {len(sustainable_products)} produtos sustent√°veis identificados")
        
        # 3. Ordena por score de sustentabilidade
        sustainable_products.sort(
            key=lambda p: p["sustainability_analysis"]["sustainability_score"], 
            reverse=True
        )
        
        return sustainable_products

    def get_ranked_products(self, user_preferences: Optional[Dict] = None) -> List[Dict[str, Any]]:
        """
        Obt√©m produtos sustent√°veis e envia para RecommenderAgent para ranking final
        
        Args:
            user_preferences: Prefer√™ncias do usu√°rio
            
        Returns:
            Lista de produtos rankeados pelo RecommenderAgent
        """
        logger.info("üéØ Iniciando processo de recomenda√ß√£o sustent√°vel")
        
        # 1. Obter produtos sustent√°veis
        sustainable_products = self.get_sustainable_products(user_preferences)
        
        if not sustainable_products:
            logger.warning("‚ö†Ô∏è Nenhum produto sustent√°vel encontrado")
            return []
        
        # 2. Enviar para RecommenderAgent via A2A
        logger.info("ü§ù Enviando produtos para RecommenderAgent via A2A...")
        ranked_products = self.a2a_client.send_products_for_ranking(
            sustainable_products, 
            user_preferences
        )
        
        logger.info(f"üéØ {len(ranked_products)} recomenda√ß√µes finais recebidas")
        return ranked_products

    def explain_recommendation(self, product: Dict[str, Any]) -> str:
        """
        Gera explica√ß√£o detalhada sobre por que um produto √© recomendado
        
        Args:
            product: Produto com an√°lise de sustentabilidade
            
        Returns:
            Explica√ß√£o em linguagem natural
        """
        analysis = product.get("sustainability_analysis", {})
        
        if not analysis:
            return "‚ùå An√°lise de sustentabilidade n√£o dispon√≠vel para este produto."
        
        product_name = analysis.get("product_name", "Produto")
        score = analysis.get("sustainability_score", 0)
        details = analysis.get("analysis_details", [])
        
        explanation = f"üå± **{product_name}**\n"
        explanation += f"üìä **Score de Sustentabilidade: {score}/100**\n\n"
        explanation += "üîç **Por que este produto √© sustent√°vel:**\n\n"
        
        for detail in details:
            explanation += f"‚Ä¢ {detail['reason']}\n"
        
        if analysis.get("carbon_score"):
            explanation += f"\nüí® **Pegada de Carbono:** {analysis.get('carbon_score')}/100 "
            explanation += "(quanto menor, melhor)\n"
        
        if analysis.get("eco_tags"):
            explanation += f"\nüè∑Ô∏è **Tags Ecol√≥gicas:** {', '.join(analysis.get('eco_tags'))}\n"
        
        explanation += f"\nüìÖ **An√°lise realizada em:** {analysis.get('analyzed_at', 'N/A')}"
        
        return explanation

    def get_sustainability_stats(self) -> Dict[str, Any]:
        """
        Calcula estat√≠sticas gerais de sustentabilidade do cat√°logo
        
        Returns:
            Estat√≠sticas de sustentabilidade
        """
        logger.info("üìä Calculando estat√≠sticas de sustentabilidade")
        
        sustainable_products = self.get_sustainable_products()
        
        if not sustainable_products:
            return {
                "total_sustainable_products": 0,
                "total_products_analyzed": 0,
                "sustainability_rate": 0,
                "average_sustainability_score": 0,
                "top_eco_tags": [],
                "carbon_score_distribution": {}
            }
        
        # Calcular estat√≠sticas
        all_products = self.mcp_client.get_products()
        total_analyzed = len(all_products)
        total_sustainable = len(sustainable_products)
        sustainability_rate = (total_sustainable / total_analyzed * 100) if total_analyzed > 0 else 0
        
        # Score m√©dio
        scores = [p["sustainability_analysis"]["sustainability_score"] for p in sustainable_products]
        avg_score = sum(scores) / len(scores) if scores else 0
        
        # Tags mais comuns
        all_tags = []
        for product in sustainable_products:
            all_tags.extend(product.get("eco_tags", []))
        
        tag_counts = {}
        for tag in all_tags:
            tag_counts[tag] = tag_counts.get(tag, 0) + 1
        
        top_tags = sorted(tag_counts.items(), key=lambda x: x[1], reverse=True)[:5]
        
        # Distribui√ß√£o de carbon_score
        carbon_scores = [p.get("carbon_score", 100) for p in sustainable_products]
        carbon_distribution = {
            "excellent": len([s for s in carbon_scores if s < 30]),    # < 30
            "good": len([s for s in carbon_scores if 30 <= s < 50]),   # 30-49
            "fair": len([s for s in carbon_scores if 50 <= s < 70]),   # 50-69
            "poor": len([s for s in carbon_scores if s >= 70])         # >= 70
        }
        
        stats = {
            "total_sustainable_products": total_sustainable,
            "total_products_analyzed": total_analyzed,
            "sustainability_rate": round(sustainability_rate, 2),
            "average_sustainability_score": round(avg_score, 2),
            "top_eco_tags": [{"tag": tag, "count": count} for tag, count in top_tags],
            "carbon_score_distribution": carbon_distribution,
            "generated_at": datetime.now().isoformat()
        }
        
        logger.info(f"üìä Estat√≠sticas: {total_sustainable}/{total_analyzed} produtos sustent√°veis ({sustainability_rate:.1f}%)")
        return stats


# Classe de compatibilidade para manter interface existente
class SustainableAdvisorAgentLegacy:
    """Classe legada para compatibilidade com implementa√ß√£o anterior"""
    
    def __init__(self, **kwargs):
        self.agent = SustainableAdvisorAgent()
        logger.info("üîÑ Usando SustainableAdvisorAgent via interface legada")

    def get_sustainable_products(self):
        """M√©todo legado"""
        return self.agent.get_sustainable_products()

    def get_ranked_products(self):
        """M√©todo legado"""
        return self.agent.get_ranked_products()


# Exemplo de execu√ß√£o
if __name__ == "__main__":
    logger.info("üöÄ Iniciando demonstra√ß√£o do SustainableAdvisorAgent")
    
    # Criar agente
    agent = SustainableAdvisorAgent()
    
    # Obter recomenda√ß√µes rankeadas
    ranked_products = agent.get_ranked_products()
    
    print("\nüå± Produtos Sustent√°veis Rankeados:")
    print("=" * 50)
    
    for i, product in enumerate(ranked_products, 1):
        analysis = product.get("sustainability_analysis", {})
        score = analysis.get("sustainability_score", 0)
        discount = product.get("discount", 0)
        
        print(f"{i}. {product.get('name')} (Score: {score}/100, Desconto: {discount}%)")
        
        # Mostrar explica√ß√£o para os 3 primeiros
        if i <= 3:
            explanation = agent.explain_recommendation(product)
            print(f"   üí° {explanation.split('Por que este produto √© sustent√°vel:')[0].strip()}")
            print()
    
    # Mostrar estat√≠sticas
    print("\nüìä Estat√≠sticas de Sustentabilidade:")
    print("=" * 50)
    stats = agent.get_sustainability_stats()
    print(f"‚Ä¢ Total de produtos sustent√°veis: {stats['total_sustainable_products']}")
    print(f"‚Ä¢ Taxa de sustentabilidade: {stats['sustainability_rate']}%")
    print(f"‚Ä¢ Score m√©dio: {stats['average_sustainability_score']}/100")
    print(f"‚Ä¢ Top eco-tags: {[tag['tag'] for tag in stats['top_eco_tags'][:3]]}")
